% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train_cnn.R
\name{train_cnn}
\alias{train_cnn}
\title{Train a CNN on a directory of images
This function trains a keras CNN model on a folder of n-dimensional images and reurns the trained model together with validation data}
\usage{
train_cnn(
  model,
  image_directory = NULL,
  image_list = NULL,
  validation_split = 0.2,
  epochs = 10,
  weight_classes = FALSE,
  sub_cropsize = NULL,
  channels = 1:5,
  batch_size = 128,
  scale = NULL,
  log_scale = FALSE,
  featurewise_standardisation = FALSE,
  imagewise_normalisation = FALSE,
  subsample_training_data = NULL,
  early_stopping = TRUE,
  ...
)
}
\arguments{
\item{model}{A keras CNN model}

\item{image_directory}{The directory containing folders of images named by class}

\item{image_list}{Alternatively, a list of pre-loaded crops may be supplied}

\item{validation_split}{The proportion of images that should be saved for validation}

\item{epochs}{Training epochs}

\item{weight_classes}{Should the loss function be weighted to account for unbalanced classes}

\item{sub_cropsize}{If the images should be further cropped, specify the number of pixels}

\item{channels}{Specify the names of the channels that should be read into the model}

\item{batch_size}{Batch size}

\item{scale}{Manually specify number to divide pixel values by}

\item{log_scale}{Log scale intensity values}

\item{featurewise_standardisation}{Argument passed to image generator}

\item{imagewise_normalisation}{Argument passed to image generator}

\item{subsample_training_data}{Argument passed to image generator}

\item{early_stopping}{Stop the training early once the loss function stabilises}

\item{...}{Other image normalsiation arguments}
}
\value{
Returns a list containing a trained keras model, training history, confusion matrix (from validation images), validation image predictions and names
}
\description{
Train a CNN on a directory of images
This function trains a keras CNN model on a folder of n-dimensional images and reurns the trained model together with validation data
}
